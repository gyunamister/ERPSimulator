package org.processmining.sapautomation.sap;

import com.sap.conn.jco.JCoContext;
import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoException;

import java.util.Map;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class Transaction {
	private final String activityName;
	private final String transName;
	private final Map<String, String> paramMap;
	private final JCoDestination sapDest;
	private final boolean commit;
	private final boolean timePerspective;
	private String record;

	public Transaction(String activityName, String transName, Map<String, String> paramMap, JCoDestination dest, boolean commit) {
		this.activityName = activityName;
		this.transName = transName;
		this.paramMap = paramMap;
		this.sapDest = dest;
		this.commit = commit;
		this.timePerspective = false;
	}

	public static void applyTransaction(String activityName, String transName, Map<String, String> paramMap, JCoDestination sapDest, boolean commit, boolean timePerspective) throws JCoException {
		Random fRandom = new Random();
		SapTransRepo transRepo = new SapTransRepo();
		double delayTime = 0.0;
		if (activityName.equals("create_order")) {
			SapTransRepo.createOrder(sapDest, paramMap);
			delayTime = 7.0;
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} else if (activityName.equals("receive_inquiry")) {
			SapTransRepo.createInquiry(sapDest, paramMap);
			delayTime = 7.0;
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} else if (activityName.equals("send_quotation_with_inquiry")) {
			SapTransRepo.createQuotationWithRef(sapDest, paramMap);
			delayTime = 7.0;
//			if(timePerspective) {
//				try {
//					double processing = fRandom.nextGaussian() * 1 + 10;
//					TimeUnit.SECONDS.sleep((long) processing);
//				} catch (InterruptedException e) {
//					e.printStackTrace();
//				}
//			}
		} else if (activityName.equals("send_quotation")) {
			SapTransRepo.createQuotation(sapDest, paramMap);
			delayTime = 7.0;
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		} else if (activityName.equals("create_order_with_quotation")) {
			SapTransRepo.createOrderWithRef(sapDest, paramMap);
			delayTime = 7.0;
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("cancel_order")) {
			SapTransRepo.cancelOrder(sapDest, paramMap);
			if (timePerspective == true) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 120;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("confirm_order")) {
			SapTransRepo.confirmOrder(sapDest, paramMap);
			if (timePerspective == true) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 120;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("change_quantity")) {
			SapTransRepo.changeOrder(sapDest, paramMap, "quantity");
			if (timePerspective == true) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 120;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("change_price")) {
			SapTransRepo.changeOrder(sapDest, paramMap, "price");
			if (timePerspective == true) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 120;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("change_material")) {
			SapTransRepo.changeOrder(sapDest, paramMap, "material");
			if (timePerspective == true) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 120;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("extend_delivery_date")) {
			String extendedDay = paramMap.get("REQ_DATE");
			int tempExtendDay = Integer.parseInt(extendedDay);
			String tempExtendedDate = java.time.LocalDate.now().plusDays(tempExtendDay).toString();
			String extendedDate = String.join("", tempExtendedDate.split("-"));
			paramMap.replace("REQ_DATE", extendedDate);
			SapTransRepo.changeOrder(sapDest, paramMap, "create_delivery_date");
			if (timePerspective == true) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 120;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("create_delivery")) {
			SapTransRepo.createDelivery(sapDest, paramMap);
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("change_delivery_quantity")) {
			SapTransRepo.changeDelivery(sapDest, paramMap, "delivery_quantity");
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 60;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("change_delivery_net_weight")) {
			SapTransRepo.changeDelivery(sapDest, paramMap, "net_weight");
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 10 + 60;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("pick_item")) {
			SapTransRepo.createTransferOrderforDelivery(sapDest, paramMap);
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("create_shipment")) {
			SapTransRepo.createShipment(sapDest, paramMap);
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("post_goods_issue")) {
			SapTransRepo.createPGI(sapDest, paramMap);
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		} else if (activityName.equals("create_invoice")) {
			SapTransRepo.createInvoice(sapDest, paramMap);
			if (timePerspective) {
				try {
					double processing = fRandom.nextGaussian() * 1 + 10;
					TimeUnit.SECONDS.sleep((long) processing);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}

		if (commit == true) {
			SapTransRepo.commitTrans(sapDest);
		}

		if (activityName.equals("send_quotation_with_inquiry")) {
			double processing = fRandom.nextGaussian() * 12 + Integer.parseInt(paramMap.get("REL_TIMESTAMP"));
			System.out.println("sleep starts for " + processing + " seconds.");
			try {
				TimeUnit.SECONDS.sleep((long) processing);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println("sleep ends");
		}

		if (delayTime != 0.0) {
			try {
				TimeUnit.SECONDS.sleep((long) delayTime);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	public void execute() {
		this.record = this.transName + " is executed with " + this.paramMap + "\n";
		try {
			try {
				// start the session
				JCoContext.begin(this.sapDest);
				applyTransaction(activityName, transName, paramMap, sapDest, commit, timePerspective);
			} finally {
				// clean ups
				JCoContext.end(this.sapDest);
			}
		} catch (JCoException e) {
			e.printStackTrace();
		}
	}

	public String getRecord() {
		return this.record;
	}
}
